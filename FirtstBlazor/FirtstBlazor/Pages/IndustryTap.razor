@page "/test"

<PageTitle>Industry</PageTitle>

<h2>Industry</h2>
<h6>This is your industry</h6>

<div>
    Wood: @Production.Wood --
    Stone: @Production.Stone -- 
    Wheat: @Production.Wheat -- 
    Wine: @Production.Wine -- 
    Textile: @Production.Textile

</div>
<br /><br />

<div>
    <button class="btn btn-primary" @onclick="BuyWoodCutter">Buy WoodCutter</button>
    <button class="btn btn-primary" @onclick="BuyStoneMine">Buy StoneMine</button>
</div>

<br /><br />
<div>
    WoodCutter: @Building.WoodCutter --
    StoneMine: @Building.StoneMine 
</div>

@code {
    public static class Production
    {
        public static int Wood { get; set; }
        public static int Stone { get; set; }
        public static int Wheat { get; set; }
        public static int Wine { get; set; }
        public static int Textile { get; set; }
    }

    public static class Building
    {
        public static int WoodCutter { get; set; }
        public static int StoneMine { get; set; }
        public static int WheatFarm { get; set; }
        public static int WineFarm { get; set; }
        public static int TextileShop { get; set; }
    }

    public static class BuildingPrice
    {
        public static int woodCutterPrice = 5;
        public static int stoneMinePrice = 25;
        
    }
    private Timer timer;

    private int woodTime = 4000;
    private int stoneTime = 5000;

    protected override async Task OnInitializedAsync() //Det her pis virker ikke helt, ved ikke hvorfor
    {
        timer = new Timer(UpdateWood, null, 0, woodTime); // 4000ms = 4  seconds

        if(Building.StoneMine >= 1)
        {
            timer = new Timer(UpdateStone, null, 0, stoneTime);
        }
    }

    private void BuyWoodCutter()
    {

        if(Production.Wood >= BuildingPrice.woodCutterPrice)
        {
            Building.WoodCutter += 1;
            Production.Wood -= BuildingPrice.woodCutterPrice;
            BuildingPrice.woodCutterPrice += 2;
            woodTime -= 100;

        }
    }
    private void BuyStoneMine()
    {

        if (Production.Stone >= BuildingPrice.stoneMinePrice)
        {
            Building.StoneMine += 1;
            Production.Stone -= BuildingPrice.stoneMinePrice;
            BuildingPrice.stoneMinePrice += 4;
            stoneTime -= 100;
        }
    }

    private void UpdateWood(object state)
    {
        if(woodTime >= 1000)
        {
            Production.Wood++;
        }
        else
        {
            Production.Wood += 2;
        }


        InvokeAsync(() => StateHasChanged());
    }

    private void UpdateStone(object state)
    {
        if(stoneTime >= 1000)
        {
            Production.Stone++;
        }
        else
        {
            Production.Stone += 2;
        }

        InvokeAsync(() => StateHasChanged());
    }

    public void Dispose()
    {
        // Clean up the timer when the component is disposed
        timer.Dispose();
    }
}
